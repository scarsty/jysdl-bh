




            在本程序的基础上做修改版简明指南





    要做新的修改版，必须熟悉lua语言。不熟悉也没关系，lua很容易学习，只要你学过任何一门
编程语言，就可以很容易上手lua。
   


1. 修改前的准备

    游戏目录下的script目录保存着所有lua代码，以及lua独立编译器（这也不是lua运行必须的，
因为可执行程序自身可以实现对lua的编译，但是在编写代码后先用独立编译器编译排错是比较好
的）和lua解释器（这个程序可以让你独立运行lua程序）。因此，并不需要你准备任何特别的东西。
当然，需要一个的文本编辑器。我个人推荐editplus。因为它有支持lua的文件，可以在编辑时对代
码不同部分显示不同的颜色，比较直观。并且可以自定义快捷键编译。可以在网上下载，并找到配置
支持lua的方法。

    建议找些资料学习一下lua语言。这里提供了一份从网上下载的文档和英文的参考手册。

    另外可以通读jymian.lua代码，理解lua的语法和游戏逻辑。代码中有很多注释，可以帮助理解。

    也可以自己编一些小代码，用lua5.1.exe运行，以检验其效果。
 

2. VC主程序提供的API和游戏的lua函数

    lua是一门小型嵌入式语言。主要用于嵌入其他C程序使用。当然在这里，我们用lua进行了大部分
的工作。lua自身提供的功能不多，更多的功能需要用C来实现，通过特定的接口定义，lua可以调用
想调用它自己的函数一样调用C函数。实际上lua的库函数都是用C编写的。
    
    <api函数说明.txt> 文件给出了jylua.exe主程序提供的api函数列表。 
    <jymain.lua函数简明列表.txt> 给出了jymian.lua中的全部函数列表。


3. script目录下的lua文件列表

    jymain.lua   游戏主文件，实现原版游戏的功能
    jyconst.lua  游戏常量定义文件。
    jymodify.lua 修改版本文件。对原版功能的扩充都保存在这里。 
    old_kdef.lua 原版kdef生成的lua文件。具体生成方法参见ConvertKdef&talk.txt。
    old_talk.lua 原版talk生成的lua文件。生成方法同上

    luac5.1.exe  lua编译器
    lua5.1.exe   lua独立运行程序


4. 游戏调用流程

    a. C程序jylua.exe 进行初始化工作。
    b. C程序加载lua文件script\jymain.lua。
    c. C程序运行lua文件中的jymain函数，控制权转交给lua。
    d. jymian函数加载其他的lua文件。按照游戏逻辑运行。

5. 修改简要流程

    a. 用文本编辑器修改代码
    b. 用luac5.1.exe编译代码。排除语法错误。
    c. 运行JYLua.exe，测试功能是否实现。
    d. 如果出现程序直接退出，可以到主目录下查看debug.txt文件，找到出错的位置。然后再
       看可能有什么问题。

6. 修改要点。

    1. 一般来说尽量少修改jymain.lua文件。尽量把修改工作放在jymodify.lua中。
       可以通过函数替换法来修改原来jymian.lua的功能。在jymodify.lua有例子演示。
    
       当然，也可以增加新的扩充文件。只要在jymain中的IncludeFile函数中导入即可。


    2. 在游戏lua代码中，为避免出问题。已经限制了全局变量的使用。在自己编程时使用的变量，必须
       声明为局部变量。而游戏本身使用三个全局变量表(table)，来保存所有的游戏数据：
            CC       保存全部常量。lua并没有常量的概念，这里只是把游戏中不需要改变的数据
                     都放在CC表中而已。

            JY       保存游戏主要变量和控制数据。包括R*/D*/S*.
 
            WAR      保存战斗全部数据。

        在实现新功能时，需要访问游戏数据的话，只需要操作这三个全程变量即可。

        如果需要设置全程变量，请酌情放在这三个全局表中。

        R*由于最常用，专门把它进行了格式转换，可以用中文名字访问。如：

                    JY.Person[0]["生命"]  即为主角的生命值。

        而D*和S*是二进制格式。只能通过提供的C API 来访问，但是已经把它封装成lua函数。
        可以通过GetD, SetD, GetS, SetS这几个函数来访问。

    3. 当实现一个功能时，最好先查看jymain.lua中是否有类似功能的函数，尽量使用原有函数组合
       来实现新功能。

    4. 对于物品功能的修改。jymodify.lua中有两个例子可以参考。基本的方法就是设置新的
       物品处理函数，挂接在预留好的位置上。

       一般来说，新物品的类型应设为药品，这样可以在平时和战斗时都可以选择。必须把
       物品加的属性都设为0，否则自动战斗过程中有可能直接把它当作药品吃掉。

    5. 对于场景事件处理。为了兼容，旧的方式仍然保留，就是根据D*中的三个事件编号，调用
       相应编号的处理函数。这些函数是从原来的kdef中导入的。实现原来的功能。 

       对于新增加的场景。我们应该用新的方式来处理。也就是说，一个场景有一个主事件入口函数。
       一个D*有一个处理函数。对于D*不同状态，可以改变原来的三个事件编号。而在处理函数
       中根据编号的不同值，处理不同的情况。这样就可以让一个D*的处理逻辑放在一起。
 
        实际上，也可以把多个关联场景的事件处理函数放在一起，做成单独的一个lua文件，这样逻
       辑更加容易理解。还方便多人合作制作MOD。
     
       在jymodify.lua中，有个用新方法处理河洛客栈的例子。做新场景事件时可以参考。

    6 对于原来游戏中的很多固定数据，都在jyconst.lua中实现。可以根据需要修改。

    7. 对于离队人员事件。在jyconst.lua中直接设置每个离队人离队时调用的函数。不用再
       固定事件编号了。

    8. 游戏中禁止使用全局变量，因此如果使用了全局变量，程序将会出错。

   
    9. 关于繁体BIG5系统下的使用。分为两种情况。
       1). 源代码的字符集问题。因为源代码中有很多字符串，而且用汉字表示R*中的变量名。
           因此如果在繁体系统下编程开发，必然要用转码工具把源代码转换成big5。这是就需要
           设置参数CC.SrcCharSet，程序才能正确处理。

       2). 操作系统的字符集。C程序可以自动判定。但是由于我没有实际的系统测试，因此判定未必
           正确。这是就可以设置参数CC.OSCharSet。

       对于显示字体，繁体系统下未必和简体系统一样，因此也有一个参数CC.FontName用来设置windows
       的字体。
       
       这几个参数都在jyconst.lua中设置。

    10. lua可以运行编译后的文件。和源代码的运行方式一样，没有任何区别。这样可以提高游戏加
        载速度，不用加载时编译了。也可以实现简单的代码加密（据说有lua反编译程序）。避免对
        代码的随意修改。
       
       用luac5.1.exe 即可把源代码编译为目标代码。重新命名为.lua文件即可。但要注意先备份原
       有代码。不要覆盖掉了。命令行格式为：

               luac5.1 -o outputfile sourcefile

       当然，为了提高大家的修改水平。如果发布了目标代码的修改版。建议过一段时间后也发布源代码。
       以让其他修改人员参考学习。



7.  常见问题。

    a. 程序刚运行就直接退出，没有任何错误提示。
           一般是lua文件有语法错误，可以查看debug.txt找到出错位置。或者用luac5.1.exe
       编译lua文件。
           直接在命令行下输入：
                luac5.1 sourcefile 
           即可进行编译。如果出错，则显示错误信息。

    b. 程序运行中间退出，没有任何错误提示。一般是使用了没有赋值的变量，或者使用了全程变量。
       一般是拼写错误。同样可以查看debug.txt找到出错位置

    c. 出现windows错误，一般是传递给C API的参数有问题。

      检查错误时，可以用lib.debug函数输出变量的值等信息。以帮助定位错误。这个函数接收字符串
      参数，可以使用string.format函数来把多个变量值输出为字符串。这个函数和C语言的printf函数
      一样，如：
                x=3;
                y=5;
                str=string.format("x=%d,y=%d",x,y);

                str的值为"x=3,y=5"



8. 一些关于修改的思路。

     *在修改游戏，增加新的功能时，尽量少改动jymain的程序结构。而是用新的函数来实现功能。

     *对于物品使用和场景事件处理，jymian中已经保留了接口。可以很方便增加。对于其他的功能
     扩展，大家可以按照类似的思路处理。

         比如要增加新的武功伤害值。就可以在JY中设置一个新数组table，里面保存新的武功伤害函数。
     而调用计算武功伤害时先判断是否有新函数，没有仍然调用以前的。如果有，则调用新的伤害。

        这样，计算武功伤害值的方法就很多了。比如有杨过和小龙女时，使用玉女素心剑法时有额外加成。
     或者使用七伤拳，如果内力没有到一定程度，则使用时伤害自己生命等等。

    
     *一般来说，可以扩展的地方，除了新物品，新武功外，还可以在原有游戏逻辑中插入处理函数。
     比如我们要做一些自己的控制变量，需要保存入进度。这样就必须在读写进度中插入自己的读写
     函数。至于保存的位置，可以在R*中增加新的idx项。如果数据很少，也可以直接做一个空武功
     或者物品等，把它们的数据重新翻译为你需要的变量。

     对于新的变量，可以在JY中增加相应项来表示。不要增加新的全局变量。




     

   
        
